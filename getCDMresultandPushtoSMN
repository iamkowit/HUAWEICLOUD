# -*- coding:utf-8 -*-
import json
import base64
import requests
import time
from datetime import datetime



def handler (event, context):
    region = "xxx"
    domain_name = "Xxx"
    username = "xxx"
    password = "xxx"
    token = None
    cdm_url = "xxx"
    smn_url = "xxx"
    
    cdm_result = get_cdm_result(domain_name, region, username, password, cdm_url, token)

  


    extractVal = {}
    if cdm_result:
        statusCode = cdm_result.status_code
        if cdm_result.status_code == 200:
        # convert String to Json
            jsonVariable = json.loads(cdm_result.text)
            jsonData = json.dumps(jsonVariable)
            # print("Line 30")
            print(jsonVariable)

            if jsonVariable.has_key("submissions"):
                print("has_key submissions")
                #result = jsonVariable.get("counters","org.apache.sqoop.submission.counter.SqoopCounters,FILES_WRITTEN")
                last_status = jsonVariable["submissions"][0]["status"]
                execute_date =  jsonVariable["submissions"][0]["execute-date"]
                job_name = jsonVariable["submissions"][0]["job-name"]
                file_written = jsonVariable["submissions"][0]["counters"]["org.apache.sqoop.submission.counter.SqoopCounters"]["FILES_WRITTEN"]
                file_read = jsonVariable["submissions"][0]["counters"]["org.apache.sqoop.submission.counter.SqoopCounters"]["FILES_READ"]

                
                extractVal = {
                    #"files_written": jsonVariable[0]["submissions"],["counters"],["org.apache.sqoop.submission.counter.SqoopCounters"],["FILES_WRITTEN"]
                    #"jobs_name" : jsonVariable["submissions"]["execute-date"]
                    #"FILES_WRITTEN2" : jsonVariable["counters"]["FILES_WRITTEN"],
                    #"FILES_WRITTEN3" : jsonVariable["org.apache.sqoop.submission.counter.SqoopCounters"]["FILES_WRITTEN"]
                    #"addr_th" : jsonVariable["result"]["address_th"],
                    #"issue_date_th" : jsonVariable["result"]["date_of_issue_th"],
                    #"expired_date_th" : jsonVariable["result"]["date_of_expiry_th"]
                    
                } 
    #jsonResponse = {
    #    'statusCode': statusCode,
    #    'isBase64Encoded': True,
    #    'headers': {
    #        "Content-type": "application/json"
    #    },
    #    'body': base64.b64encode(json.dumps(extractVal)),
    #}

    smn_message = "JOS NAME = " + job_name + " Excute Date = " + str(datetime.fromtimestamp(execute_date/1000))+ " with result status = " + last_status +  " and FILES READ = " +  str(file_read) + " FILES WRITTEN = " + str(file_written) + " "
    smn_subject = "JOS NAME = " + job_name + " Excute Date = " + str(datetime.fromtimestamp(execute_date/1000)) + " with result status = " + last_status + " "

    print("FILES WRITTEN")
    
    print(smn_message)
    smn_message = send_smn(domain_name, region, username, password, smn_url, token, smn_subject, smn_message)
    return smn_message
    #file_written = jsonVariable["submissions"]["counters"]["org.apache.sqoop.submission.counter.SqoopCounters"]["FILES_WRITTEN"]
    #print(file_written.text)

    return json.dumps(jsonVariable)


    
def get_token(domain_name, region, username, password, token):
        domain_name = domain_name
        region = region
        username = username
        password = password
        
        if token is not None:
            return
        retry_times = 0
        #endpoint = "iam.%s.myhuaweicloud.com" % region
        url = "https://iam.myhuaweicloud.com/v3/auth/tokens" 
        headers = {"Content-Type": "application/json"}
        payload = {
          "auth": {
            "identity": {
              "methods": ["password"],
              "password": {
                "user": {
                  "name": username,
                  "password": password,
                  "domain": {
                    "name": domain_name
                  }
                }
              }
            },
            "scope": {
              "project": {
                "name": region  # region name
              }
            }
          }
        }
        try:
            while True:
                response = requests.post(url, json=payload, headers=headers, verify=False)
                if 201 != response.status_code:
                    if retry_times < self._RETRY_TIMES:
                        retry_times += 1
                        print("Obtain the token again.")
                        time.sleep(self._POLLING_INTERVAL)
                        token = None
                        continue
                    else:
                        print("Failed to obtain the token.")
                        print(response.text)
                        token = None
                        return
                else:
                    print("Token obtained successfully.")
                    token = response.headers.get("X-Subject-Token", "")
                    token = token
                    # print(token)
                    return token
        except Exception as e:
            print(e)
            print("Invalid token request.")



def get_cdm_result(domain_name, region, username, password, cdm_url, token):
        domain_name = domain_name
        region = region
        username = username
        password = password
        authtoken = get_token(domain_name, region, username, password, token)
        if authtoken is not None:
            try:
                url = cdm_url
                headers = {
                    "Content-Type": "application/json",
                    "X-Auth-Token": authtoken
                }
                payload = {}
                response = requests.get(url, json=payload, headers=headers)

                # print "CDM Result"
                # print(response)
                return response
            except Exception as e:
                print(e)
                return None
        return None

def send_smn(domain_name, region, username, password, smn_url, token, smn_subject, smn_message):
        domain_name = domain_name
        region = region
        username = username
        password = password
        smn_subject = smn_subject
        smn_message = smn_message
        authtoken = get_token(domain_name, region, username, password, token)
        if authtoken is not None:
            try:
                url = smn_url
                headers = {
                    "Content-Type": "application/json",
                    "X-Auth-Token": authtoken
                }
                payload = {
                           "subject": smn_subject,
                           "message": smn_message
                }
                response = requests.post(url, json=payload, headers=headers)
                #if 401 == response.status_code and ("The token expires." in response.text):
                    # The token expires and needs to be refreshed.
                    #self.refresh_token()
                    # return get_cdm_result

                # elif 403 == response.status_code and ("The authentication token is abnormal." in response.text):
                    # The token expires and needs to be refreshed.
                    #self.refresh_token()
                    # return get_cdm_result(uri, imagepath, options)
                print "SMN Result"
                print response
                return response
            except Exception as e:
                print(e)
                return None
        return None

